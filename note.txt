待优化：
1、目前只支持utf8的编码，可以优化，先检测编码，统一转换后再解析
2、效率太低，QFontMetrics函数比较耗时，目前想到
    一是优化算法，尽量减少QFontMetrics的调用
    二是另起一个线程，后台不停计算，界面显示就没感觉这么明显了。
	目前用的方案二，在opt分支下，还有些问题需要修复


    后来发现是QFontMetrics类中的tightBoundingRect函数在windows调用的话效率会非常低，改用boundingRect函数，效率提升非常多。
	
用的vimrc这个文件进行测试



做了一些优化，大幅度减少了QFontMetrics类中boundingRect函数的调用次数，效率有了明显提升，不过加载大文件还是会有些慢，
似乎可以预先算好每个字符的大小，汉字的空间似乎每个可以认为是一样的。不过需要判断QString中每个字符是英文还是汉字，如果能高效的判断的话，似乎这种方式的效率会更高吧.
再结合线程的方式，那么应该可以实现无论多大的文件都可以瞬间完成打开
